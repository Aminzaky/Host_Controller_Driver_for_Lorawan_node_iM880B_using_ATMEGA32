#include <avr/io.h>
#include "platform_types.h"
#define FCPU 8000000
#include "utils.h"
#include <util/delay.h>
#include "LCD.h" // 3lshan ana bst5dm el command w data functions gwa el init function .. so lazem prototypes

extern void lcd_write_command(uint8 command)
{
	DDRB=0xff;
	DDRD=0xff;
	CLRBIT(PORTB,0);//rs=1
	CLRBIT(PORTB,1);//rw=0
	PORTD=command;
	SETBIT(PORTB,2);//enble wiz fall edge
	_delay_ms(5);
	CLRBIT(PORTB,2);
}

extern void lcd_write_data(uint8 data)
{
	DDRB=0xff;
	DDRD=0xff;
	SETBIT(PORTB,0);//rs=1
	CLRBIT(PORTB,1);//rw=0
	PORTD=data;
	SETBIT(PORTB,2);//enble wiz fall edge
	_delay_ms(5);
	CLRBIT(PORTB,2);
}
extern void lcd_init(void)
{
	_delay_ms(40);
	lcd_write_command(0b00111100);
	_delay_ms(3);
	lcd_write_command(0b00001100);
	_delay_ms(3);
	lcd_write_command(0b00000001);
	_delay_ms(5);

}
 extern void LCD_String (sint8 ptr)		/ Send string to LCD function */
{
	sint8 i;
	for(i=0; ptr[i]!=0 ;i++)		/* Send each char of string till the NULL */
	{
		lcd_write_data(ptr[i]);
	}
}
 void LCD_Goto_xy(uint8 x, uint8 y)
 {
 	uint8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 	lcd_write_command(firstcharAdr[y-1] + x - 1);
 	_delay_ms(1);
}
 void LCD_MoveCursorLeft (void)
 {
 	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
 	_delay_ms(1);
 }

 //***************************
 void LCD_MoveCursorRight (void)
 {
 	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
 	_delay_ms(1);
 }


#include <avr/io.h>
#include "platform_types.h"
#define FCPU 8000000
#include "utils.h"
#include <util/delay.h>
#include "LCD.h" // 3lshan ana bst5dm el command w data functions gwa el init function .. so lazem prototypes

extern void lcd_write_command(uint8 command)
{
	DDRB=0xff;
	DDRD=0xff;
	CLRBIT(PORTB,0);//rs=1
	CLRBIT(PORTB,1);//rw=0
	PORTD=command;
	SETBIT(PORTB,2);//enble wiz fall edge
	_delay_ms(5);
	CLRBIT(PORTB,2);
}

extern void lcd_write_data(uint8 data)
{
	DDRB=0xff;
	DDRD=0xff;
	SETBIT(PORTB,0);//rs=1
	CLRBIT(PORTB,1);//rw=0
	PORTD=data;
	SETBIT(PORTB,2);//enble wiz fall edge
	_delay_ms(5);
	CLRBIT(PORTB,2);
}
extern void lcd_init(void)
{
	_delay_ms(40);
	lcd_write_command(0b00111100);
	_delay_ms(3);
	lcd_write_command(0b00001100);
	_delay_ms(3);
	lcd_write_command(0b00000001);
	_delay_ms(5);

}
 extern void LCD_String (sint8 ptr)		/ Send string to LCD function */
{
	sint8 i;
	for(i=0; ptr[i]!=0 ;i++)		/* Send each char of string till the NULL */
	{
		lcd_write_data(ptr[i]);
	}
}
 void LCD_Goto_xy(uint8 x, uint8 y)
 {
 	uint8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 	lcd_write_command(firstcharAdr[y-1] + x - 1);
 	_delay_ms(1);
}
 void LCD_MoveCursorLeft (void)
 {
 	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
 	_delay_ms(1);
 }

 //***************************
 void LCD_MoveCursorRight (void)
 {
 	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
 	_delay_ms(1);
 }


/*
 * LCD.h
 *
 *  Created on: ???/???/????
 *      Author: PC
 */

#ifndef LCD_H_
#define LCD_H_
#define LCD_MOVE_CURSOR_LEFT     0x10                                           // move cursor left  (decrement)
#define LCD_MOVE_CURSOR_RIGHT    0x14                                           // move cursor right (increment)
#define LCD_MOVE_DISP_LEFT       0x18                                           // shift display left
#define LCD_MOVE_DISP_RIGHT      0x1C                                           // shift display right
extern void lcd_write_command(uint8 command);
extern void lcd_write_data(uint8 data);
extern void lcd_init(void);
extern void LCD_String (sint8 *ptr);
void LCD_Goto_xy(uint8 x, uint8 y);




#endif /* LCD_H_ */